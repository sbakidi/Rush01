het is mogelijk om het op een efficiëntere manier te coderen, zodat de oplossing kan worden uitgebreid naar elke grootte van de puzzel. Hier is een algemeen stappenplan:

Maak een 2D-array aan die de puzzelgrootte bepaalt en initieer alle cellen met nul.

Lees de inputparameters in en sla ze op in arrays.

Maak een functie aan die alle mogelijke combinaties van boxhoogtes voor elke rij/column genereert.

Maak een functie aan die controleert of de gegenereerde combinatie van boxhoogtes voldoet aan de regels van de puzzel.

Maak een functie aan die de hoogtes van de dozen toewijst aan de juiste rijen en kolommen van het 2D-array.

Maak een functie aan die alle rijen en kolommen controleert om te zien of ze voldoen aan de regels van de puzzel.

Voer een recursieve backtracking-functie uit om alle mogelijke combinaties van boxhoogtes voor elke rij/column te testen en vind de eerste oplossing die voldoet aan de regels van de puzzel.

Print de oplossing in de console of sla deze op in een bestand.


Hier is een meer gedetailleerd stappenplan:

Begin met het definiëren van de nodige constanten voor de dimensies van de kaart. Dit maakt het mogelijk om later gemakkelijk van grootte te veranderen.

Creëer de datastructuur om de kaart op te slaan. Dit kan een tweedimensionale array zijn van de juiste grootte.

Creëer een functie om de kaart af te drukken, zodat u uw oplossing kunt controleren. Dit kan ook later handig zijn bij het debuggen.

Implementeer een functie om te controleren of een kaart geldig is. Deze functie moet controleren of de rijen en kolommen de juiste hoeveelheid van elke hoogte van doos bevatten en of er geen duplicaten zijn.

Implementeer een functie om de mogelijke doosconfiguraties voor een bepaalde rij of kolom te berekenen. Dit kan worden gedaan door het maken van alle permutaties van de mogelijke hoogtes en vervolgens te controleren of ze aan de geldigheidsvereisten voldoen.

Implementeer een functie om alle mogelijke kaartconfiguraties te genereren. Dit kan worden gedaan door alle mogelijke doosconfiguraties voor elke rij en kolom te berekenen en vervolgens te controleren of ze aan de geldigheidsvereisten voldoen.

Implementeer een functie om de eerste geldige kaartconfiguratie te vinden. Dit kan worden gedaan door de mogelijke kaartconfiguraties één voor één te genereren totdat er een geldige kaart wordt gevonden.

Pas de code aan om de dimensies van de kaart aan te passen aan de hand van een parameter. Dit kan worden gedaan door de constanten te vervangen door variabelen en de functies zo te implementeren dat ze werken met de nieuwe dimensies.

Test uw code grondig met verschillende kaartafmetingen om te controleren of alles correct werkt.

Met deze aanpak kunt u de code schrijven op een manier die schaalbaar is en gemakkelijk kan worden aangepast aan verschillende kaartafmetingen. Het kan echter wel zijn dat de berekeningstijd toeneemt naarmate de kaart groter wordt, dus u moet er rekening mee houden dat het oplossen van grotere kaarten meer tijd kan kosten.
